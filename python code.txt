import pandas as pd

# Path to the extracted CSV file
csv_file_path = extract_folder_path + 'vgsales.csv'

# Load the data from the CSV file
dataset = pd.read_csv(csv_file_path)

# Display the first few rows of the dataset to understand its structure
dataset.head()

# Sales Analysis by Platform
platform_sales = dataset.groupby('Platform').sum()['Global_Sales'].sort_values(ascending=False)

# Display the top platforms based on global sales
platform_sales.head(10)

import matplotlib.pyplot as plt
import seaborn as sns

# Trend Analysis Over Years
yearly_sales = dataset.groupby('Year').sum()['Global_Sales']

# Plotting the yearly global sales
plt.figure(figsize=(12, 6))
sns.lineplot(data=yearly_sales)
plt.title('Global Video Game Sales Over the Years')
plt.xlabel('Year')
plt.ylabel('Global Sales (in millions)')
plt.grid(True)
plt.show()

# Genre Popularity Analysis
genre_sales = dataset.groupby('Genre').sum()['Global_Sales'].sort_values(ascending=False)

# Plotting the genre sales
plt.figure(figsize=(12, 6))
sns.barplot(x=genre_sales.values, y=genre_sales.index)
plt.title('Global Sales by Video Game Genre')
plt.xlabel('Global Sales (in millions)')
plt.ylabel('Genre')
plt.show()

# Top Publishers Analysis
publisher_sales = dataset.groupby('Publisher').sum()['Global_Sales'].sort_values(ascending=False).head(10)

# Plotting the top publishers
plt.figure(figsize=(12, 6))
sns.barplot(x=publisher_sales.values, y=publisher_sales.index)
plt.title('Top 10 Video Game Publishers by Global Sales')
plt.xlabel('Global Sales (in millions)')
plt.ylabel('Publisher')
plt.show()

# Regional Sales Comparison
regional_sales = dataset[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum()

# Plotting the regional sales
plt.figure(figsize=(8, 5))
sns.barplot(x=regional_sales.index, y=regional_sales.values)
plt.title('Comparative Regional Sales of Video Games')
plt.xlabel('Region')
plt.ylabel('Sales (in millions)')
plt.show()

# Correlation Analysis
correlation_matrix = dataset[['Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']].corr()

# Plotting the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Sales Data')
plt.show()

# Sales Distribution Analysis
plt.figure(figsize=(12, 6))
sns.histplot(dataset['Global_Sales'], bins=50, kde=True)
plt.title('Distribution of Global Video Game Sales')
plt.xlabel('Global Sales (in millions)')
plt.ylabel('Frequency')
plt.xlim(0, 5)  # Limiting to 5 to focus on the majority distribution
plt.show()

# Best-Selling Games Analysis
top_selling_games = dataset[['Name', 'Global_Sales']].sort_values(by='Global_Sales', ascending=False).head(10)

top_selling_games

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np

# Preparing the data for regression analysis
# Aggregating sales data by genre and year
genre_yearly_sales = dataset.groupby(['Year', 'Genre']).sum()['Global_Sales'].reset_index()

# Pivoting the table to get years as columns and genres as rows
pivot_data = genre_yearly_sales.pivot(index='Genre', columns='Year', values='Global_Sales').fillna(0)

# Preparing the dataset for regression
# Using years as features and each genre as a separate dependent variable
X = pivot_data.columns.values.reshape(-1, 1)  # Years
genre_predictions = {}

# Predicting the popularity for each genre for 2024
for genre in pivot_data.index:
    y = pivot_data.loc[genre].values  # Sales data for the genre
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    # Linear Regression Model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predicting for 2024
    predicted_sales = model.predict(np.array([[2024]]))
    genre_predictions[genre] = predicted_sales[0]

# Sorting the predictions to find the most popular genres in 2024
predicted_genre_popularity = dict(sorted(genre_predictions.items(), key=lambda item: item[1], reverse=True))
predicted_genre_popularity



